ADSB Message Structure - 
	
	An ADS-B frame is 112 bits long and consists of five main parts, shown as follows:
+----------+----------+-------------+------------------------+------------+
|  DF (5)  |  CA (3)  |	 ICAO (24)	|		ME (56)			 |	PI (24)	  |
+----------+----------+-------------+------------------------+------------+

1. DF - Downlink Format 
	- Civil Aircrafts (DF = 17 - 10001)
	  Transoner Based - Mode S Extended Squitter
	- Non Transponder Based Aircrafts (DF = 18 - 10010)
	  Signifies that equipment interrrogation is not possible.

2. CA - Capability
	-  


END-----------------------------------------------------------------------------------------------------------------------------------


ADSB_aicraftID_category.m - 

INPUT:
DF = 17;
CA = 5;
ICAO_hex = '4840D6';
type_code = 4;
category = 1;
aircraft_id = 'KLM1023';
ADSB_aircraftID_category(DF, CA, ICAO_hex, type_code, category, aircraft_id)

OUTPUT:
ADS-B Message without Parity (Hexadecimal):
8D4840D6202CC371C32CE0
Parity Bits (Hexadecimal):
576098
Final ADS-B Message with Parity (Hexadecimal):
8D4840D6202CC371C32CE0576098
PPM signal saved to: C:\Users\rauna\OneDrive - UW\Study\Project\Summer_Internship\ADS-B\ADS-B_WaveGen\ADSB_Encode\CSV\ppm_signal.txt

END-----------------------------------------------------------------------------------------------------------------------------------

1. Altitude = 38000 ft
2. Latitude = 52.258
3. Longitude = 3.91937
4. DF = 17
5. ICAO = 40621D
Type Code = 11
CA = 5
surveillanceStatus = 0
singleAntennaFlag = 1


ADSB_encode_airbornePosition.m - 

INPUT:
latitude = 52.258;
longitude = 3.91937;
altitude = 38000;
t0 = 1457996402;
t1 = 1457996400;
typeCode = 11;
surveillanceStatus = 0;
singleAntennaFlag = 1;
DF = 17;
CA = 5;
ICAO = '40621D';
[message0, message1, mostRecent] = ADSB_encode_airbornePosition(latitude, longitude, altitude, t0, t1, typeCode, surveillanceStatus, singleAntennaFlag, DF, CA, ICAO)

OUTPUT:
message0 =

    '8D40621D265862D690C8ACF9EA27'


message1 =

    '8D40621D26586241ECC8ACDF67B5'


mostRecent =

    'ME0 is the most recent message'

END-----------------------------------------------------------------------------------------------------------------------------------



AES_Encryption.m and AES_Decryption.m- 

INPUT:

% Encrypt
hex_input = '8D40621D265862D690C8ACF9EA27';
[encrypted_hex, encryption_output] = AES_Encryption(hex_input);
disp('Encryption Output:');
disp(encryption_output);

% Decrypt
[decrypted_hex, decryption_output] = AES_Decryption(encrypted_hex);
disp('Decryption Output:');
disp(decryption_output);

% Verify
if strcmpi(hex_input, decrypted_hex)
    disp('Encryption and decryption successful!');
else
    disp('Error: Decrypted result does not match original input.');
    disp(['Original input: ', hex_input]);
    disp(['Decrypted output: ', decrypted_hex]);
end

OUTPUT: 

Encryption Output:
Input Statistics:
  Hex length: 28 characters
  Byte length: 14 bytes
Encryption Output:
  Encrypted byte length: 16 bytes
  Encrypted hex length: 32 characters

Unencrypted (HEX): 8D40621D265862D690C8ACF9EA27
Encrypted (HEX): F88EF4DFBEC26BC4F0B19446E32FEA6B
Decryption Output:
Input Statistics:
  Encrypted hex length: 32 characters
  Encrypted byte length: 16 bytes
Decryption Output:
  Decrypted byte length: 14 bytes
  Decrypted hex length: 28 characters

Encrypted (HEX): F88EF4DFBEC26BC4F0B19446E32FEA6B
Decrypted (HEX): 8D40621D265862D690C8ACF9EA27
Encryption and decryption successful!

END-----------------------------------------------------------------------------------------------------------------------------------


generatePPM.m - 

INPUT: 

hex_input = '8D4840D6212CC371C32CE08B1A6F';
[ppm_signal_encrypted, time_axis_encrypted] = generatePPM(hex_input);

OUTPUT: 

Hex Input:
F88EF4DFBEC26BC4F0B19446E32FEA6B
Binary Representation:
1  1  1  1  1  0  0  0  1  0  0  0  1  1  1  0  1  1  1  1  0  1  0  0  1  1  0  1  1  1  1  1  1  0  1  1  1  1  1  0  1  1  0  0  0  0  1  0  0  1  1  0  1  0  1  1  1  1  0  0  0  1  0  0  1  1  1  1  0  0  0  0  1  0  1  1  0  0  0  1  1  0  0  1  0  1  0  0  0  1  0  0  0  1  1  0  1  1  1  0  0  0  1  1  0  0  1  0  1  1  1  1  1  1  1  0  1  0  1  0  0  1  1  0  1  0  1  1
PPM signal saved to: C:\Users\rauna\OneDrive - UW\Study\Project\Summer_Internship\ADS-B\ADS-B_WaveGen\PPM\CSV\ppm_signal.txt

END-----------------------------------------------------------------------------------------------------------------------------------


generateFlippedPPM.m - 

INPUT: 

hex_value = '8D4840D6212CC371C32CE08B1A6F';
generateFlippedPPM(hex_value);

OUTPUT: 


Original ADS-B Message (Hex):
F88EF4DFBEC26BC4F0B19446E32FEA6B
Original ADS-B Message (Binary):
1111100010001110111101001101111110111110110000100110101111000100111100001011000110010100010001101110001100101111
Flipped ADS-B Message (Binary):
0000011101110001000010110010000001000001001111011001010000111011000011110100111001101011101110010001110011010000
Flipped PPM signal saved to: C:\Users\rauna\OneDrive - UW\Study\Project\Summer_Internship\ADS-B\ADS-B_WaveGen\ADSB_Encode\CSV\flipped_ppm_signal.txt


END-----------------------------------------------------------------------------------------------------------------------------------

decodePPM.m

INPUT: 

file_path = 'C:\Users\rauna\OneDrive - UW\Study\Project\Summer_Internship\ADS-B\ADS-B_WaveGen\PPM\CSV\ppm_signal.txt';
[decoded_hex, decoded_binary] = decodePPM(file_path);

OUTPUT: 

Decoded Hexadecimal:
Decoded Hexadecimal:
F8
Decoded Binary:
1  1  1  1  1  0  0  0

ans =

    'F8'


END-----------------------------------------------------------------------------------------------------------------------------------


ADSB_encode_surfacePosition.m


typeCode = 7; 			% Type code for surface position
groundTrackStatus = 1; 	% Ground track status (1 for valid, 0 for invalid)
movementSpeed = 17; 	% Speed in knots
trackAngle = 92.8125; 	% Track angle in degrees
latitude = 52.32061; 	% Latitude in degrees
longitude = 4.73473; 		% Longitude in degrees
refLat = 51.990; 		% Reference latitude)
refLon = 4.375; 		% Reference longitude
t0 = 1457996410; 		% Unix timestamp for even frame
t1 = 1457996412; 		% Unix timestamp for odd frame
DF = 17; 				% Downlink Format
CA = 4; 				% Capability
ICAO = '484175'; 		% ICAO address (hexadecimal)

[msg0, msg1, mostRecent] = ADSB_encode_surfacePosition(typeCode, groundTrackStatus, movementSpeed, trackAngle, latitude, longitude, refLat, refLon, t0, t1, DF, CA, ICAO)


END-----------------------------------------------------------------------------------------------------------------------------------

ADSB_encode_airborneVelocities.m

DF = 17;                      % Downlink Format
CA = 5;                       % Capability
ICAO_hex = '485020';         % ICAO Address in hexadecimal
TypeCode = 19;               % Type Code for airborne velocity
IntentChangeFlag = 0;        % Intent Change Flag
IFRCapabilityFlag = 1;       % IFR Capability Flag
NUC = 0;                     % Navigation Uncertainty Category
ReservedBits = 0;            % Reserved Bits
speed = 159.20;              % Aircraft speed in knots
track_angle = 182.88;        % Track angle in degrees
Sew = 1;                     % Sign bit for East-West component
Sns = 1;                     % Sign bit for North-South component
subtype = 1;                 % Sub-type 1
SH = 0;                      % Status bit for magnetic heading (available)
T = 0;                       % Airspeed type (0 for IAS)
VrSrc = 0;                   % Vertical Rate Source (1 for barometric altitude)
S_Vr = 1;                    % Vertical Rate Direction (0 for climb)
VS = -832;                   % Vertical Rate in ft/min
sign_bit = 0;                % Sign bit for altitude difference (0 or 1)
dAlt = 550;                  % Altitude difference in feet

% Call the function
[adsb_bin, adsb_hex, adsb_crc, Vew, Vns, HDG, AS, VR, dAlt] = ADSB_encode_Velocity(DF, CA, ICAO_hex, TypeCode, IntentChangeFlag, IFRCapabilityFlag, NUC, ReservedBits, speed, track_angle, Sew, Sns, subtype, SH, T, VrSrc, S_Vr, VS, sign_bit, dAlt);

% Display the results
disp(['ADS-B Message in binary: ', adsb_bin]);
disp(['ADS-B Message in hexadecimal: ', adsb_hex]);
disp(['East-West Velocity (Vew): ', num2str(Vew)]);
disp(['North-South Velocity (Vns): ', num2str(Vns)]);
disp(['Magnetic Heading (HDG): ', num2str(HDG)]);
disp(['Airspeed (AS): ', num2str(AS)]);
disp(['Vertical Rate (VR): ', num2str(VR)]);
disp(['Altitude Difference (dAlt): ', num2str(dAlt), ' feet']);

END-----------------------------------------------------------------------------------------------------------------------------------
timestamp,
lat lon, alt (GNSS and baro),
speed, track, velocity,
received signal strength,
same setup as ADS-B for other signals (RemoteID and 900MHz ISM),
listen on ADS-B and send it out on WiFi or vice-versa
Band-agile radio

-Due to Ukraine, ADS-B messages are completely off. Spoofing stuff. 
-Band hopping

â€¢	Engineered a MATLAB-based signal generation framework for a NASA SBIR-funded 180nm multi-band CMOS radio transceiver IC (BORN), enabling verification of its multi-band, multi-protocol Unmanned Ariel Systems (UAS) tracking capabilities, supporting real-time monitoring and Unmanned Traffic Management (UTM) systems. 

END-----------------------------------------------------------------------------------------------------------------------------------

generatePPMWithFlipped.m

hex_input = '8D4840D6212CC371C32CE08B1A6F';
generatePPMWithFlipped(hex_input);

END-----------------------------------------------------------------------------------------------------------------------------------

ylim([-50,1050]);
xlim([-2,122]);

END-----------------------------------------------------------------------------------------------------------------------------------

hex_input = '8D40621D58C382D690C8AC2863A7';
generatePPMWithFlipped(hex_input);

1. Altitude = 38000 ft
2. Latitude = 52.258
3. Longitude = 3.91937
4. DF = 17
5. ICAO = 40621D
Type Code = 11
CA = 5
surveillanceStatus = 0
singleAntennaFlag = 1

END-----------------------------------------------------------------------------------------------------------------------------------

msg_tx = "8D40621D58C382D690C8AC2863A7"
msg_bin_tx = "1000110101000000011000100001110101011000110000111000001011010110100100001100100010101100001010000110001110100111"

msg_bin_rx = "0101000010001110100011000110001000100011001110000001100100001000010001100010011000010011000100010001100000001000"

01110010101111110     0     1     1     101     1     1
1     0     0     0     1     0     1     0     1     0     0     1     1
1     0     0     1     1     1     1     0     0     0     1     1     1
1     1     0     1     0     0     1     0     1     0     0     1     01     1     0     1     1     1     1     0     01    1     0     11     1     0     1     0     1     0     0     1     1     1     1     01     0     1     1     1     10     0     1     1     1     0     00     1     0     1     1     0     0


1000110101000 0000110001000 0111010101100 0110000111000 0010110101101 0010000110010 0010101100001 0100001100011 10100111
0111001010111 1111001110111 1000101010011 1001111000111 1101001010010 1101111001101 1101010011110 1011110011100 01011000

0111001010111
1111001110111
1000101010011
1001111000111
1101001010010
1101111001101
1101010011110
1011110011100
0101100

100011010100000001100010000111010101100011000011100000101101011010010000110010001010110000101000011000111010011
1000110101000000011000100001110101011000110000111000001011010110100100001100100010101100001010000110001110100111

END-----------------------------------------------------------------------------------------------------------------------------------

hex_input = '8DA6D70A994409940838175B284F';
DF = 17
ICAO = A6D70A
Type Code = 19
Sub Type = 1
Intent Change Flag = 0
IFR = 1
NUC = 0
V_Source = 0
V_Sign = 1
V_Rate = -832 % in ft/min
Alt_Sign = 0
Alt_Change = 
Track Angle = 182.8 % in degrees
Velocity = 159.2 % in knots

hex_input = '8DA6D70A9B06B6AF189400CBC33F';
DF = 17
ICAO = A6D70A
Type Code = 19
Sub Type = 3
Intent Change Flag = 0
IFR = 0
NUC = 0
V_Source = 1
V_Sign = 1
V_Rate = -2304 % in ft/min
Alt_Sign = 0
Alt_Change = 
Track Angle = 244 % in degrees
Velocity = 375 % in knots

generatePPMWithFlipped(hex_input);

usbipd bind --busid 2-4
usbipd attach --wsl --busid 2-4


8CA6D70A183B5D128208209B7F3E
ICAO = A6D70A
Alt = 0
Lat = 0
Lon = 0

8DA6D70958c380000000002e6c90
Alt = 38000
Lat = 0
Lon = 0

8da6d70958c382aaab471cdfd85c
Alt = 38000
Lat = 10 
Lon = 10

ADS-B Splitting in 2 bands - 
Step 1: 
hex_input = '8D40621D58C382D690C8AC2863A7';
splitADSB(hex_input)

Output: 
Verification: Message splitting is correct
Input ADS-B Frame:
8D40621D58C382D690C8AC2863A7
Output ADS-B Frame 1:
8D40621D50C080D090C0A0A53021
Output ADS-B Frame 2:
8D40621D0803020600080C591AC5

Step 2: 
hex_input = '8D40621D50C080D090C0A0A53021';
generatePPMWithFlipped(hex_input)

Step 3: 
hex_input = '8D40621D0803020600080C591AC5';
generatePPMWithFlipped(hex_input)

Step 4: 
Transmit and receive the waveforms.

Step 5: 
use plot_and_decode_adsb.m to get back the bits in binary and in hex from CSV file

Step 6:
Get back 2 ADSB messages: ADSB_Band1 and ADSB_Band2

Step 7: 
ADSB_Band1 = '8D40621D50C080D090C0A0A53021';
ADSB_Band2 = '8D40621D0803020600080C591AC5';
combineADSB(ADSB_Band1, ADSB_Band2)

Output:
ADSB_Band1:8D40621D50C080D090C0A0A53021
ADSB_Band2:8D40621D0803020600080C591AC5
ADSB_Result:8D40621D58C382D690C8AC2863A7

Step 8:
Verify using pyModeS

ADS-B Splitting in 3 bands - 
Step 1: 
hex_input = '8D40621D58C382D690C8AC2863A7';
splitADSB_Three(hex_input)

Output: 
Verification: Message splitting is correct
Input ADS-B Frame:
8D40621D58C382D690C8AC2863A7
Output ADS-B Frame 1:
8D40621D500300D00000A0AB3B58
Output ADS-B Frame 2:
8D40621D0800800600C00C30F659
Output ADS-B Frame 3:
8D40621D00C00200900800B3AEA6

Step 2: 
hex_input = '8D40621D500300D00000A0AB3B58';
generatePPMWithFlipped(hex_input)

Step 3: 
hex_input = '8D40621D0800800600C00C30F659';
generatePPMWithFlipped(hex_input)

Step 4:
hex_input = '8D40621D00C00200900800B3AEA6';
generatePPMWithFlipped(hex_input)

Step 5: 
Transmit and receive the waveforms.

Step 6: 
use plot_and_decode_adsb.m to get back the bits in binary and in hex from CSV file

Step 7:
Get back 3 ADSB messages: ADSB_Band1 and ADSB_Band2

Step 8: 
ADSB_Band1 = '8D40621D500300D00000A0AB3B58';
ADSB_Band2 = '8D40621D0800800600C00C30F659';
ADSB_Band3 = '8D40621D00C00200900800B3AEA6';
combineADSB_Three(ADSB_Band1, ADSB_Band2, ADSB_Band3)

Output:
ADSB_Band1: 8D40621D500300D00000A0AB3B58
ADSB_Band2: 8D40621D0800800600C00C30F659
ADSB_Band3: 8D40621D00C00200900800B3AEA6
ADSB_Result: 8D40621D58C382D690C8AC2863A7

Step 9:
Verify using pyModeS
